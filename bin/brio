#!/usr/bin/env ruby
require 'gli'
require 'highline/import'
require 'launchy'
require 'brio'

include GLI::App

program_desc 'command line client for app.net inspired by t for twitter'

version Brio::VERSION

client = Brio::Client.new

output_formats = {
    'csv' => Brio::Format::CSV.new,
    'pretty' => Brio::Format::Pretty.new
  }


desc 'Optional. Format of the output (default: pretty for TTY, csv otherwise)'
arg_name 'csv|pretty'
flag :format

desc 'authorize brio with app.net'
skips_pre
command :authorize do |c|
  c.action do |global_options,options,args|

    if client.config.empty?
      say "Welcome! Before you can use *brio* you need to authorize it with app.net"
      ask "Press [Enter] to open the app.net site."
      say ""

      Launchy.open client.oauth_url
      token = ask "Enter your oauth token:"

      client.config['token'] = token
      say "Authorization successful."
    else
      say "You already authorized with app.net"
    end

  end
end

desc "Retrives Posts in the stream. Defaults to user's stream"
command :stream do |c|
  c.desc 'Retrives Posts from the global stream.'
  c.switch [:g, :global]

  c.desc 'The number of latest Posts to return, up to a maximum of 200'
  c.default_value '20'
  c.flag [:c, :count]

  c.action do |global_options,options,args|
    formatter = output_formats[global_options[:format]]
    posts = client.get_stream options[:global], options[:c]
    formatter.print_posts posts
  end
end

#default_desc "Post a message."
desc 'Make a new Post to appdotnet. Delete a post. Reply to a post.. see `brio help post` for more.'
arg_name 'message'
command :post do |c|
  c.default_desc "Make a new Post to appdotnet"
  c.action do |global_options,options,args|
    if args.empty?
      message = ask "Whats on your mind:"
    else
      message = args[0]
    end
    help_now!('message is required') if message.empty?
    post =  client.post text: message
    say "<%= color('#{post.text}', :red) %>" if post.is_a? Brio::Resources::NullPost
  end

  c.desc 'Reply to a post'
  c.arg_name 'postID message'
  c.command :reply do |reply|
    reply.action do |global_options,options,args|
      help_now!('postID and message are both required') if args.empty?
      if args.size == 1
        message = ask "Your reply:"
      else
        message = args[1]
      end
      help_now!('postID and message are both required') if message.empty?
      post =  client.post reply_to: args[0], text: message
      say "<%= color('#{post.text}', :red) %>" if post.is_a? Brio::Resources::NullPost
    end
  end

  c.desc 'Delete a post (only if created by you)'
  c.arg_name 'postID'
  c.command :delete do |delete|
    delete.action do |global_options,options,args|
      help_now!('postID is required') if args.empty?
      post = client.delete_post args[0]
      say "<%= color('#{post.text}', :red) %>" if post.is_a? Brio::Resources::NullPost
    end
  end

  c.desc 'Repost a post'
  c.arg_name 'postID'
  c.command :repost do |repost|
    repost.action do |global_options,options,args|
      help_now!('postID is required') if args.empty?
      post = client.repost args[0]
      say "<%= color('#{post.text}', :red) %>" if post.is_a? Brio::Resources::NullPost
    end
  end

end

desc 'Look up a user. If no argument is provided, it defualts to the current authenticated user'
default_value 'me'
arg_name 'username', :optional
command :whois do |c|
  #do not forget to attach @
  c.action do |global_options,options,args|
    user = client.get_user (args[0] || 'me')
    puts user.to_yaml
  end
end


desc 'Follow a user'
arg_name 'username', :multiple
command :follow do |c|
  c.action do |global_options,options,args|
    help_now!('username is required') if args.empty?
    puts "follow command ran"
  end
end

desc 'Unfollow a user'
arg_name 'username', :multiple
command :unfollow do |c|
  c.action do |global_options,options,args|
    help_now!('username is required') if args.empty?
    puts "follow command ran"
  end
end

desc 'List various resources. Followers, Mentions, .. run `brio help list` for more.'
command :list do |c|
  c.desc 'List the posts where the user is mentioned. It defualts to the current authenticated user'
  c.default_value 'me'
  c.arg_name 'username', :optional
  c.command :mentions do |m|
    m.action do |global_options,options,args|
      puts "list mentions command ran #{args}"
    end
  end

  c.desc 'List all accounts that a user is following. It defualts to the current authenticated user'
  c.default_value 'me'
  c.arg_name 'username', :optional
  c.command :following do |f|
    f.action do |global_options,options,args|
      users = client.get_user_following (args[0] || 'me')
      puts users
    end
  end

  c.desc 'list all accounts that are following a user - it defualts to the current authenticated user'
  c.default_value 'me'
  c.arg_name 'username', :optional
  c.command :followers do |f|
    f.action do |global_options,options,args|
      users = client.get_user_followers (args[0] || 'me')
      puts users
    end
  end
end

# desc 'List all accounts that a user is following and they follow her back. It defualts to the current authenticated user'
# default_value 'me'
# arg_name 'username'
# command :friends do |c|
#   c.action do |global_options,options,args|
#     puts "friends command ran"
#   end
# end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abourt and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  exit_now!('You need to authorize with app.net. Run `brio authorize` to do so.') if client.config.empty? 
  if global[:format].nil?
    if STDOUT.tty? 
      global[:format] = 'pretty'
    else
      global[:format] = 'csv'
    end
  end 
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
